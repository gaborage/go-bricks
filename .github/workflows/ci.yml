name: CI
permissions:
  contents: read

on:
  push:
    branches: [main]
    paths-ignore:
      - 'tools/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'tools/**'

jobs:
  test:
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false  # Allow other matrix jobs to continue if one fails
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Clear Go modules cache (Unix)
        if: matrix.os != 'windows-latest'
        run: rm -rf ~/go/pkg/mod

      - name: Clear Go modules cache (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path "$env:USERPROFILE\go\pkg\mod") {
            Remove-Item -Recurse -Force "$env:USERPROFILE\go\pkg\mod"
          }
          exit 0
        shell: pwsh

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ci-${{ runner.os }}-go${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ci-${{ runner.os }}-go${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run tests (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          packages=$(go list ./... | grep -vE '/(tools)(/|$)')
          if [ -n "$packages" ]; then
            go test -race -cover -covermode=atomic -coverprofile=coverage.out $packages
          else
            echo "No packages found to test"
            exit 1
          fi

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          for /f "delims=" %%i in ('go list ./...') do (
            echo %%i | findstr /v /c:"tools" >nul && (
              go test -race -cover -covermode=atomic %%i
            )
          )

      - name: Upload unit test coverage artifact (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: coverage.out
          retention-days: 1

  integration-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
      fail-fast: false

    steps:
      - uses: actions/checkout@v5

      - name: Clear Go modules cache
        run: rm -rf ~/go/pkg/mod

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: integration-${{ runner.os }}-go${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            integration-${{ runner.os }}-go${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run integration tests
        run: |
          set -euo pipefail
          docker info >/dev/null 2>&1 || { echo "Docker is not running"; exit 1; }
          echo "Running integration tests with testcontainers..."
          go test -v -race -tags=integration -covermode=atomic -coverprofile=coverage-integration.out ./database/mongodb/...

      - name: Upload integration test coverage artifact
        if: matrix.go-version == '1.25'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: coverage-integration.out
          retention-days: 1

  merge-coverage:
    runs-on: ubuntu-latest
    needs: [test, integration-test]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Download unit test coverage
        uses: actions/download-artifact@v5
        with:
          name: coverage-unit
          path: .

      - name: Download integration test coverage
        uses: actions/download-artifact@v5
        with:
          name: coverage-integration
          path: .

      - name: Merge coverage files
        run: |
          set -euo pipefail

          # Verify both files exist
          if [ ! -f coverage.out ]; then
            echo "Error: coverage.out not found"
            exit 1
          fi
          if [ ! -f coverage-integration.out ]; then
            echo "Error: coverage-integration.out not found"
            exit 1
          fi

          # Merge coverage files (skip mode line from second file)
          echo "Merging coverage files..."
          cat coverage.out > coverage-merged.out
          tail -n +2 coverage-integration.out >> coverage-merged.out

          # Show summary
          echo "Coverage merge complete:"
          wc -l coverage.out coverage-integration.out coverage-merged.out

          # Rename merged file to coverage.out for SonarCloud
          mv coverage-merged.out coverage.out

      - name: Upload merged coverage for SonarCloud
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 1

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Clear Go modules cache
        run: rm -rf ~/go/pkg/mod

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ci-lint-${{ runner.os }}-go1.25-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ci-lint-${{ runner.os }}-go1.25-

      - name: golangci-lint
        uses: golangci/golangci-lint-action@1d64cc17c98f6243ff9c45fc39cc6911222133e3
        with:
          version: latest
          args: --timeout=5m --skip-dirs=tools

  sonarqube:
    name: SonarCloud
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    needs: merge-coverage
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download coverage artifact
        uses: actions/download-artifact@v5
        with:
          name: coverage-report
          path: .

      - name: Scan
        uses: SonarSource/sonarqube-scan-action@ba6563cca79df854af1350ec3dc5881313ec2d3c
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Clear Go modules cache
        run: rm -rf ~/go/pkg/mod

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ci-security-${{ runner.os }}-go1.25-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ci-security-${{ runner.os }}-go1.25-

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner
        run: |
          set -euo pipefail
          packages=$(go list ./... | grep -vE '/tools(/|$)')
          if [ -n "$packages" ]; then
            gosec $packages
          else
            echo "No packages found to scan"
            exit 1
          fi

  build:
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false  # Allow other matrix jobs to continue if one fails
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Clear Go modules cache (Unix)
        if: matrix.os != 'windows-latest'
        run: rm -rf ~/go/pkg/mod

      - name: Clear Go modules cache (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path "$env:USERPROFILE\go\pkg\mod") {
            Remove-Item -Recurse -Force "$env:USERPROFILE\go\pkg\mod"
          }
          exit 0
        shell: pwsh

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ci-build-${{ runner.os }}-go${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ci-build-${{ runner.os }}-go${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          packages=$(go list ./... | grep -vE '/tools(/|$)')
          if [ -n "$packages" ]; then
            go build -v $packages
          else
            echo "No packages found to build"
            exit 1
          fi

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          for /f "delims=" %%i in ('go list ./...') do (
            echo %%i | findstr /v /c:"tools" >nul && (
              go build -v %%i
            )
          )

      - name: Verify go mod (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum
