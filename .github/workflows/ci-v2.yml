name: CI

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ============================================================================
  # Job 1: Detect which components changed
  # ============================================================================
  changes:
    runs-on: ubuntu-latest
    outputs:
      # yamllint: valid GitHub Actions context expression
      framework: ${{ steps.filter.outputs.framework }}
      # yamllint: valid GitHub Actions context expression
      tool: ${{ steps.filter.outputs.tool }}
    steps:
      - uses: actions/checkout@v5

      - name: Detect changed paths
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36  # v3.0.2
        id: filter
        with:
          filters: |
            framework:
              - '**'
              - '!tools/**'
            tool:
              - 'tools/openapi/**'
              - '.github/workflows/ci-v2.yml'

  # ============================================================================
  # Framework CI Jobs (conditional on framework changes)
  # ============================================================================

  framework-test:
    needs: changes
    if: needs.changes.outputs.framework == 'true'
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run tests (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          # Test all packages - tools/openapi excluded automatically (separate module)
          go test -race -cover -covermode=atomic -coverpkg=./... -coverprofile=coverage.out ./...

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $packages = go list ./... | Where-Object { $_ -notmatch '/tools(/|$)' }
          if (-not $packages) {
            Write-Host "No packages found to test"
            exit 1
          }

          $testOutput = go test -race $packages 2>&1
          $exitCode = $LASTEXITCODE

          if ($exitCode -eq 0) {
            Write-Host $testOutput
            exit 0
          }

          Write-Host "Initial test run failed, re-running per package to evaluate failures" -ForegroundColor Yellow
          $knownPatterns = @(
            'Expected /tmp.*got D:'
          )
          $unexpectedFailure = $false

          foreach ($pkg in $packages) {
            Write-Host "Re-testing package: $pkg" -ForegroundColor Cyan
            $pkgOutput = go test -race $pkg 2>&1
            $pkgExitCode = $LASTEXITCODE

            if ($pkgExitCode -eq 0) {
              Write-Host $pkgOutput
              continue
            }

            $isKnownIssue = $false
            foreach ($pattern in $knownPatterns) {
              if ($pkgOutput -match $pattern) {
                Write-Host "Known Windows-specific issue detected in ${pkg}: $pattern" -ForegroundColor Yellow
                $isKnownIssue = $true
                break
              }
            }

            if (-not $isKnownIssue) {
              Write-Host "Unexpected test failure in $pkg" -ForegroundColor Red
              Write-Host $pkgOutput
              $unexpectedFailure = $true
            } else {
              Write-Host $pkgOutput
            }
          }

          if ($unexpectedFailure) {
            exit 1
          }

          Write-Host "All unexpected Windows test failures resolved or matched known issues." -ForegroundColor Green
          exit 0

      - name: Upload unit test coverage artifact (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        uses: actions/upload-artifact@v5
        with:
          name: coverage-unit
          path: coverage.out
          retention-days: 1

  framework-integration-test:
    needs: changes
    if: needs.changes.outputs.framework == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
      fail-fast: false

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Download dependencies
        run: go mod download

      - name: Pre-pull container images
        run: |
          echo "Warming Docker cache with container images..."
          docker pull mongo:8.0 &
          docker pull postgres:17-alpine &
          docker pull gvenzl/oracle-free:23-slim &
          docker pull rabbitmq:3.13-management-alpine &
          wait
          echo "All container images cached"

      - name: Run integration tests
        run: |
          set -euo pipefail
          docker info >/dev/null 2>&1 || { echo "Docker is not running"; exit 1; }
          echo "Running integration tests with testcontainers..."
          # Build tag controls which tests run - only integration tests will execute
          go test -race -tags=integration -covermode=atomic -coverpkg=./... -coverprofile=coverage-integration.out ./...

      - name: Upload integration test coverage artifact
        if: matrix.go-version == '1.25'
        uses: actions/upload-artifact@v5
        with:
          name: coverage-integration
          path: coverage-integration.out
          retention-days: 1

  framework-merge-coverage:
    needs: [changes, framework-test, framework-integration-test, tool-test]
    if: |
      always() &&
      needs.changes.result == 'success' &&
      (needs.changes.outputs.framework == 'true' || needs.changes.outputs.tool == 'true') &&
      (needs.framework-test.result == 'success' || needs.framework-test.result == 'skipped') &&
      (needs.framework-integration-test.result == 'success' || needs.framework-integration-test.result == 'skipped') &&
      (needs.tool-test.result == 'success' || needs.tool-test.result == 'skipped')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: go.sum

      - name: Download unit test coverage
        if: needs.changes.outputs.framework == 'true'
        uses: actions/download-artifact@v6
        with:
          name: coverage-unit
          path: .

      - name: Download integration test coverage
        if: needs.changes.outputs.framework == 'true'
        uses: actions/download-artifact@v6
        with:
          name: coverage-integration
          path: .

      - name: Download tool coverage
        if: needs.changes.outputs.tool == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v6
        with:
          name: openapi-tool-coverage-report
          path: tools/openapi

      - name: Merge coverage files
        run: |
          set -euo pipefail

          echo "=== Coverage Merge Process ==="
          echo "Checking for available coverage files..."

          # Check which coverage files exist
          has_framework_unit=false
          has_framework_integration=false
          has_tool=false

          if [ -f coverage.out ]; then
            echo "✓ Framework unit tests coverage found"
            has_framework_unit=true
          fi

          if [ -f coverage-integration.out ]; then
            echo "✓ Framework integration tests coverage found"
            has_framework_integration=true
          fi

          if [ -f tools/openapi/coverage.out ]; then
            echo "✓ Tool coverage found"
            has_tool=true
          fi

          # Ensure at least one coverage file exists
          if [ "$has_framework_unit" = false ] && [ "$has_framework_integration" = false ] && [ "$has_tool" = false ]; then
            echo "Error: No coverage files found"
            exit 1
          fi

          echo ""
          echo "=== Coverage File Validation ==="

          # Validate framework unit coverage
          if [ "$has_framework_unit" = true ]; then
            unit_lines=$(wc -l < coverage.out)
            echo "Framework unit coverage: $unit_lines lines"

            # Check if file is suspiciously small (should be >10k lines for full framework)
            if [ "$unit_lines" -lt 10000 ]; then
              echo "⚠️  WARNING: Framework unit coverage is unusually small ($unit_lines lines)"
              echo "    Expected: >10,000 lines for full framework coverage"
            fi

            # Check first non-mode line to verify it's framework code (not tool code)
            first_package=$(sed -n '2p' coverage.out | cut -d':' -f1)
            if echo "$first_package" | grep -q "tools/openapi"; then
              echo "❌ ERROR: Framework coverage file contains tool packages!"
              echo "    First package: $first_package"
              echo "    This indicates artifact download overwrote framework coverage"
              exit 1
            else
              echo "✓ Framework coverage verified (starts with: $first_package)"
            fi
          fi

          # Validate integration coverage
          if [ "$has_framework_integration" = true ]; then
            integration_lines=$(wc -l < coverage-integration.out)
            echo "Integration coverage: $integration_lines lines"

            if [ "$integration_lines" -lt 1000 ]; then
              echo "⚠️  WARNING: Integration coverage is small ($integration_lines lines)"
            else
              echo "✓ Integration coverage looks reasonable"
            fi
          fi

          # Validate tool coverage
          if [ "$has_tool" = true ]; then
            tool_lines=$(wc -l < tools/openapi/coverage.out)
            echo "Tool coverage: $tool_lines lines"
            echo "✓ Tool coverage validated"
          fi

          # Merge coverage files using simple concatenation
          # This approach is optimal for our use case because:
          # - No coverage line overlaps (different test suites cover different code paths)
          # - All files from same source code (same Go version, same build)
          # - All use covermode=atomic consistently
          # - Zero external dependencies (tools like gocovmerge would add unnecessary complexity)
          echo ""
          echo "Merging coverage files..."

          # Start with framework unit coverage if available, otherwise create empty file with mode line
          if [ "$has_framework_unit" = true ]; then
            cat coverage.out > coverage-merged.out
          else
            echo "mode: atomic" > coverage-merged.out
          fi

          # Append framework integration coverage (skip mode line)
          if [ "$has_framework_integration" = true ]; then
            tail -n +2 coverage-integration.out >> coverage-merged.out
          fi

          # Append tool coverage (skip mode line)
          if [ "$has_tool" = true ]; then
            tail -n +2 tools/openapi/coverage.out >> coverage-merged.out
          fi

          # Show summary
          echo ""
          echo "=== Coverage Merge Summary ==="
          if [ "$has_framework_unit" = true ]; then
            wc -l coverage.out | awk '{print "Framework unit:       " $1 " lines"}'
          fi
          if [ "$has_framework_integration" = true ]; then
            wc -l coverage-integration.out | awk '{print "Framework integration:" $1 " lines"}'
          fi
          if [ "$has_tool" = true ]; then
            wc -l tools/openapi/coverage.out | awk '{print "Tool coverage:        " $1 " lines"}'
          fi
          wc -l coverage-merged.out | awk '{print "Merged total:         " $1 " lines"}'

          # Rename merged file to coverage.out for SonarCloud
          mv coverage-merged.out coverage.out

          echo ""
          echo "✓ Coverage merge complete - ready for SonarCloud"

      - name: Upload merged coverage for SonarCloud
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 1

  framework-build:
    needs: changes
    if: needs.changes.outputs.framework == 'true'
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Download dependencies
        run: go mod download

      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          packages=$(go list ./... | grep -vE '/tools(/|$)')
          if [ -n "$packages" ]; then
            go build -v $packages
          else
            echo "No packages found to build"
            exit 1
          fi

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $packages = go list ./... | Where-Object { $_ -notmatch '/tools(/|$)' }
          if (-not $packages) {
            Write-Host "No packages found to build"
            exit 1
          }
          go build -v $packages

      - name: Verify go mod (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  # ============================================================================
  # OpenAPI Tool CI Jobs (conditional on tool changes)
  # ============================================================================

  tool-test:
    needs: changes
    if: needs.changes.outputs.tool == 'true'
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: tools/openapi

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: tools/openapi/go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run tests (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          # Run tests with coverage, but handle multiple packages properly
          packages=$(go list ./... | grep -v models)
          if [ -n "$packages" ]; then
            # Test each package individually to avoid coverage profile conflicts
            for pkg in $packages; do
              echo "Testing package: $pkg"
              go test -race "$pkg"
            done
            # Generate combined coverage for SonarCloud (Ubuntu + Go 1.25 only)
            if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.go-version }}" = "1.25" ]; then
              echo "Generating coverage report for SonarCloud"
              go test -race -coverprofile=coverage.out -covermode=atomic $packages || {
                echo "Coverage generation failed, but tests passed"
                exit 0
              }
            fi
          else
            echo "No packages found to test"
            exit 1
          fi

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $packages = go list ./...

          if (-not $packages) {
            Write-Host "No packages found to test"
            exit 1
          }

          $testOutput = go test -race $packages 2>&1
          $exitCode = $LASTEXITCODE

          if ($exitCode -eq 0) {
            Write-Host $testOutput
            exit 0
          }

          Write-Host "Initial test run failed, re-running per package to evaluate failures" -ForegroundColor Yellow
          $knownPatterns = @(
            'Expected /tmp.*got D:'
          )
          $unexpectedFailure = $false

          foreach ($pkg in $packages) {
            Write-Host "Re-testing package: $pkg" -ForegroundColor Cyan
            $pkgOutput = go test -race $pkg 2>&1
            $pkgExitCode = $LASTEXITCODE

            if ($pkgExitCode -eq 0) {
              Write-Host $pkgOutput
              continue
            }

            $isKnownIssue = $false
            foreach ($pattern in $knownPatterns) {
              if ($pkgOutput -match $pattern) {
                Write-Host "Known Windows-specific issue detected in ${pkg}: $pattern" -ForegroundColor Yellow
                $isKnownIssue = $true
                break
              }
            }

            if (-not $isKnownIssue) {
              Write-Host "Unexpected test failure in $pkg" -ForegroundColor Red
              Write-Host $pkgOutput
              $unexpectedFailure = $true
            } else {
              Write-Host $pkgOutput
            }
          }

          if ($unexpectedFailure) {
            exit 1
          }

          Write-Host "All unexpected Windows test failures resolved or matched known issues." -ForegroundColor Green
          exit 0

      - name: Upload coverage artifact for SonarCloud (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        uses: actions/upload-artifact@v5
        with:
          name: openapi-tool-coverage-report
          path: tools/openapi/coverage.out
          retention-days: 1
          if-no-files-found: ignore

  tool-build:
    needs: changes
    if: needs.changes.outputs.tool == 'true'
    strategy:
      matrix:
        go-version: ['1.24', '1.25']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: tools/openapi

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: tools/openapi/go.sum

      - name: Download dependencies
        run: go mod download

      - name: Build and validate CLI (Unix)
        if: matrix.os != 'windows-latest'
        run: make validate-cli

      - name: Build and validate CLI (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Build the CLI tool (equivalent to make build)
          go build -ldflags "-X main.version=dev" -o go-bricks-openapi.exe ./cmd/go-bricks-openapi

          # Validate CLI commands work (equivalent to make validate-cli)
          ./go-bricks-openapi.exe version
          ./go-bricks-openapi.exe --help
          # Use absolute path to project root from tools/openapi working directory
          $projectRoot = Resolve-Path "../../"
          ./go-bricks-openapi.exe doctor --project $projectRoot
          Write-Host "CLI validation passed"

      - name: Verify go mod (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.25'
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  # ============================================================================
  # Shared Jobs (run for framework OR tool OR both)
  # ============================================================================

  lint-framework:
    needs: changes
    if: needs.changes.outputs.framework == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: go.sum

      - name: golangci-lint (framework)
        uses: golangci/golangci-lint-action@14973f18c82b6d66679563f71666ccee11907cb2
        with:
          version: latest
          args: --timeout=5m --skip-dirs=tools

  lint-tool:
    needs: changes
    if: needs.changes.outputs.tool == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: tools/openapi/go.sum

      - name: golangci-lint (tool)
        uses: golangci/golangci-lint-action@14973f18c82b6d66679563f71666ccee11907cb2
        with:
          version: latest
          working-directory: tools/openapi
          args: --timeout=5m

  security-framework:
    needs: changes
    if: needs.changes.outputs.framework == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: go.sum

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner (framework)
        run: |
          set -euo pipefail
          packages=$(go list ./... | grep -vE '/tools(/|$)')
          if [ -n "$packages" ]; then
            gosec $packages
          else
            echo "No packages found to scan"
            exit 1
          fi

  security-tool:
    needs: changes
    if: needs.changes.outputs.tool == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tools/openapi

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: tools/openapi/go.sum

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner (tool)
        run: |
          set -euo pipefail
          packages=$(go list ./... | grep -v models)
          if [ -n "$packages" ]; then
            gosec $packages
          else
            echo "No packages found to scan"
            exit 1
          fi

  # ============================================================================
  # SonarCloud (framework + tool coverage)
  # ============================================================================

  sonarcloud:
    name: SonarCloud
    needs: [changes, framework-merge-coverage]
    if: |
      always() &&
      needs.changes.result == 'success' &&
      (needs.changes.outputs.framework == 'true' || needs.changes.outputs.tool == 'true') &&
      needs.framework-merge-coverage.result == 'success'
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download coverage artifact
        uses: actions/download-artifact@v6
        with:
          name: coverage-report
          path: .

      - name: Scan
        uses: SonarSource/sonarqube-scan-action@40f5b61913e891f9d316696628698051136015be
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
